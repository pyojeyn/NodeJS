node.js
- 서버에서 실행되는 자바스크립트
- 백엔드 개발자가 사용하는 언어
- Google V8 JavaScript 엔진을 사용하여 코드를 실행하고 기본 모듈이 자바스크립트로 사용 
- node.js 웹서버(apache,iis,zeus,nginx..)과 같은 소프트웨어가 필요없이 웹 서버 역할을 할수 있는 내장 또는 외부 라이브러리가 존재 (웹 서버 따로 필요 없음 ex : 톰캣 등)
- npm 패키지 관리자가 포함 (그레이들 느낌) -> node.js의 강점중의 하나! 
    👽 npm에 필요한 패키지를 사용해서 install 하게 되면 nodejs의 라이브러리가 포함이 되고 nodejs의 라이브러리를 사용할수 있다. (따로 웹사이트를 돌아다니면서 jar나 그런거 받아서 포함시킬 필요가 없다!)


https://nodejs.org/ko/

node.js 설치 확인
- 버전 확인
    cmd에서 node -v 명령어를 실행
    v14.17.6

npm 설치 확인
- 버전확인
    cmd에서 npm -v 명령어를 실행
    6.14.15    

====================================================================================================================================================================
🎇 package.json 은 굉장히 !! 중요한 파일임 node.js가 실행을 하면서 파일을 만들어 node.js는 자바스크립트이기 때문에 저장할때 확장명이 js이다. 
    노드는 컴파일과 실행을 한꺼번에 해주기 때문에 node test.js 실행하면 package.json이 존재 한다면 package.json을 통해서 먼저 환경을 읽어들이고 실행을 하게 된다.
    그래서 package.json이 무조건 있어야 nodejs를 실행할때 환경도 구축하고 라이브러리도 끌어다가 쓸수 있게 해줄 수 있다. 
    
    entry point  프로젝트를 실행하게 되면 가장 먼저 뜨는 파일! 

✔ package.json 만들기 (강사님이랑 할때는 전날 package.json)을 복붙해오기 때문에 새로 만들 때 모를 수 있으니까 잘 기억해두자 !! 
    npm init : 옵션을 직접 제공 
    이거 하기전에 cmd창에 cd 내가 package.json 설치하고 싶은 파일경로 를 적어줘야 한다

    npm init -y : 기본값 기준으로 바로 생성
=====================================================================================================================================================================
Node.js는 파일다루는게 제일 기초이다 !!

http, express 모듈은 url이 호출 되면 rest 문법을 찾는다. 그와 연관된 html 이 있을건데 그 파일을 fs 모듈로 load시킴.
✨필요한 url 호출 → http,express 가 rest문법 (post, get, put, delete)찾음! → 그 문법과 연관된 html 파일 찾음 → fs가 그 파일 사용자의 브라우저에 끌어와서 load시켜줌

http/express → rest 문법 → fs 모듈로 html 로드! 

🎀fs 모듈
- 파일처리와 관련된 모듈
- node.js 에서 가장 중요하고 기초가 되는 모듈

⊙ 설치 굳이 필요없음 외부 모듈이 아니라 Node.js에 포함되어있는 모듈이라서 

fs의 메소드
readFile() : 파일을 비동기적으로 읽음  多
readFileSync() : 파일을 동기적으로 읽음
writeFile() : 파일을 비동기적으로 씀 多
writeFileSync() : 파일을 동기적으로 씀 

✔ 동기식과 비동기식
동기식 : 프로그램이 동작하는 상태에서 완전히 해당 내용을 끝내고 다음으로 넘기는 방식 
비동기식 : 동작이 끝나지 않은 상태에서도 제어권을 넘긴 후 프로그램을 계속 진행하는 방식 
======================================================================================================
http 모듈 (ex톰캣 역할)
- node.js 에서 기본적인 웹 서버 관련 모듈. 웹서버 프로그램을 직접 설치 하지 않아도 됨
- 이벤트가 감지되었을 때 (사용자가 내 서버에 들어왔다 이런거 이벤트로 감지함 커넥션 이벤트!!! 자바스크립트는 이벤트프로그래밍이다 !! 버튼 클릭 어쩌고 무슨 이벤트 발생하면 그게에 대한 반응 해주는게 js특징)
- http 웹 서버를 생성하는 것과 관련된 모든 기능을 담당

🎆http모듈의 메소드 
createServer() : server 객체를 생성
writeHead() : 응답 header를 구성 (스프링에서 Header같은 느낌인가;;)
write() : 응답 body를 작성
end() : 응답 body를 사용자에게 📧전송
listen() : 서버를 실행하고 클라이언트를 기다림


문제.
text.html 파일을 읽어 사용자에게 html 문서를 전달하는 node 파일을 작성


MIME 형식
text/plain : 일반적인 text 파일
text/html : html 형식 파일
text/css : css 형식 파일
text/xml : xml 형식 파일
text/json : json 형식 파일 
image/jpeg : jpeg 이미지 파일
image/png : png 이미지 파일
video/mpeg : mpeg 동영상 파일
audio/mp3 : mp3 음악 파일
=========================================================================================
express 모듈 (외부)
- http 모듈만 사용해서 웹 서버를 구성하면 직접 많은 기능을 따로 개발해야 함
- 익스프레스 모듈을 사용하면 간단한 코드로 웹 서버의 기능을 대부분 구현할 수 있음
- 미들웨어와 라우터를 이용하여 편리하게 웹 서버를 구성 

🎈 미들웨어 : express의 기능을 확장시켜서 express모듈을 강화
🎈 라우터 : RestController느낌

package 설치
    - npm install 모듈명 
    - npm i 모듈명
    npm install express

    package-lock.josn : express에 필요한 것들이 추가적으로 깔려있는 것 . express모듈에서 사용하는 모듈들 모아논거

🎊express 모듈의 메소드 
get() : get으로 사용자 정보를 전달 받음
post() : post로 사용자 정보를 전달 받음
use() : 미들웨어를 등록 (기능 확장) ✔
write() : 클라이언트에게 전송할 데이터를 작성
redirect() : 웹 페이지의 경로를 강제로 이동
send() : 클라이언트에게 데이터를 전송

이벤트 
request : 클라이언트가 서버에게 요청 할 때 발생하는 이벤트
connection : 클라이언트가 서버에 접속할 때 발생하는 이벤트 
close : 서버가 종료될 때 발생하는 이벤트 

✔ get 요청 매개변수 받기
http://127.0.0.1:3000/?userid=apple&userpw=1111

const 상수명 = req.query.변수명

✔ post 요청 매개변수 받기
뭔가 좀 달르다.. 
get 보다 살짝 귀찮음?

- post 방식을 통한 요청 매개변수를 확인하려면 body-parser와 같은 모듈을 사용해야함 
-✨body-parser를 express에 미들웨어로 등록 use() 메소드 사용 !! 히히

    app.use(bodyparser.urlencoded({extended:false})); //비주얼코드에서는 얘 더이상 안쓴다고 줄그어지는데 안써주면 post 못받음. 그냥 무시하고 작성하라는 뜻 

- urlencoded() 
    - body-parser를 사용하면 자동으로 req body 속성이 추가되고 저장됨 //body : post 데이터 받는 애 
    - 인코딩이 기본적으로 utf-8로 설정
-{extended:false} : 중첩된 객체 표현을 허용할지 여부를 체크 
            bodyparser를 쓰게 되면 여러가지 기존의 express의 모듈에 설치되어있는 그 기능하고 겹치는 메소드가 생김.
            나중에 잘못되면 해당 메소드 사용 못하게 될수도 있기 때문에 해야됨. 메소드 충돌 시키지 않겟다는 뜻;


문제 : login.html (로그인) 을 생성하고 아이디와 비밀번호를 넣고 서버로 보내면 아래와 같이 출력되는 node.js파일을 생성

로그인 정보 
userid : banana
userpw : 0000

🎁Router 미들웨어 
- 사용자의 다양한 요청이 들어왔을 때 use() 메소드로 설정한 미들웨어가 항상 호출되는 불편한 점을 개선 
    
    app.use((req,res) =>{
        ...
    });

Router 객체 
- const 객체명 = express.Router(); //express 안에 들어있음; 

http://127.0.0.1/login
객체명.route('/login).get({실행할 함수});
객체명.route('/login).post({실행할 함수});

✔ 익스프레스에  Router 객체 미들웨어 등록
- app.use('/', 객체명);
