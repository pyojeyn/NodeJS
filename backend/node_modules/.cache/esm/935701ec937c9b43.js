let User,Joi;_937‍.x([["register",()=>register]]);_937‍.w("../../models/user",[["default",["User"],function(v){User=v}]]);_937‍.w("joi",[["default",["Joi"],function(v){Joi=v}]]);// 로직?

/**
 * POST /api/auth/register
 * {
 *      username:'apple',
 *      passwort:'1111'
 * }
 * 
 */

 
  
         const register = async (ctx) =>{ //ctx : express의 req,res 객체!
     const schema = Joi.object().keys({ //Joi 의 객체의 keys들을 확인
         username: Joi.string().alphanum().min(3).max(20).required(),
         password: Joi.string().required(),
     });
 
     const result = schema.validate(ctx.request.body); // 문법검사
     if(result.error){ //Joi에서 통과하지 못했을때 에러!
         ctx.status = 400;
         ctx.body = result.error;
         return;
     }
 
     const { username, password } = ctx.request.body; 
 
     try{ //지금 전달받은 username이(ctx.request.body) 혹시 잇냐 User 객체에!
         const exists = await User.findByUsername(username);
         if(exists){ // 중복아이디 있으니까 그냥 return 시켜버림 
             ctx.status = 409;
             return;
         }
         // 중복 아이디 없다면 새로운 User 객체 만들어냄
         const user = new User({
             username,
         });
         await user.setPassword(password); // 암호화된 password가 만들어져서 저장
         await user.save(); //model 저장
 
         ctx.body = user.serialize(); //password 뺀 객체 만들어서 body에 저장
 
         const token = user.generateToken(); //토큰 만들어줌
         ctx.cookies.set('access_token',token, { // 쿠키 만들어줌 위에 있는 token 심어줌
             maxAge: 1000 * 60 * 60 *24 * 7, //7일
             httpOnly:true, //브라우저url을 통해서만 쿠키를 확인할수 잇게끔! (해킹방지)
         });
     }catch(e){
         ctx.throw(500,e);
     }
 }
 
 //ctx.request.body : 사용자로부터 전달받은 data