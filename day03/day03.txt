사용자 정의 모듈
- 사용자가 직접 만들어 코드를 관리할 수 있도록 작성한 모듈 
1.
    module.export = () => {
        모듈 코드
        ....
        ....
    }
    - 모듈 사용방법
    const 객체명 = require('파일명');

2.
    모듈 코드 
    ...
    ...
    module.export = 변수명;
    - 모듈 사용 방법
    const 객체명 = require('변수명');

✔ JSON.parse()
    json 포멧으로 되어 있는 문자열을 json 객체로 변환 
    -JSON.parse(문자열);
✔ JSON.stringify()
    json 객체를 json 포멧의 문자열로 변환
    -JSON.stringify(json 객체);      

👽cookie-parser 모듈    (중요함 !)
- 쿠키를 쉽게 설정하고 사용할 수 있게 도와주는 모듈 
- 익스프레스 객체에 미들웨어로 등록 
- npm i cookie-parser

cookieParser() : 일반 쿠키를 사용 
cookieParser('암호화하기 위한 문자') : 암호화된 쿠키를 사용

쿠키 설정
res.cookie('키','값',{쿠키 생성 옵션});

쿠키 생성 옵션
maxAge : 만료시간을 밀리초 단위로 설정
expires : 만료시간을 GMT 시간으로 설정
path : cookie의 경로를 설정. 기본설정은 "/"
signed : true(암호화해서 쿠키를 저장)

쿠키 조회 
req.cookies.cookie : 일반 쿠키 
req.signedCookies.cookie : 암호화된 쿠키 

쿠키 삭제
res.clearCookie('키',{path:'경로'});


express-session 모듈
- 세션을 관리하기 위한 익스프레스 미들웨어 모듈

app.use(session({세션모듈의 옵션}));

세션모듈의 옵션
- recret : 쿠키를 임의로 변조하는 것을 방지하기 위한 값. 세션을 암호화하여 저장 
- resave : 세션을 언제나 저장하고 있을지 설정하는 값. 이 값은 false로 설정하는 것을 권장
- saveUninitialized : 세션이 저장되기 전에 saveUninitialized 상태로 미리 만들어서 저장
    default : true, session을 강제로 저장, 아무 내용없는 session이 계속 저장
    false : 빈 세션 객체가 쌓이는 것을 방지
- npm i express-session


세션 초기 설정
const 객체명 = req.session; 
객체명.변수 = 값;

세션 변수 사용
객체명.변수; 

세션 삭제 
req.session.destroy( ()=>{
    세션 삭제시 처리할 문장;
    ....
});


NoSQL
- Not only SQL의 약자
- RDMS(관계형 데이터베이스)의 한계를 극복하기 위해 만들어진 새로운 형태의 데이터베이스
- 실시간 대용량 트래픽을 감당(NoSQL은 성능을 최우선으로 만들어짐)
- 메시징 시스템등 에 많이 사용

MongoDB 다운로드 
- NoSQL 이기 때문에 관계형 데이터베이스의 테이블 개념이 없음
- 데이터가 모인 하나의 단위를 컬렉션이라고 부름
- 데이터를 정해 놓은 컬럼의 형태로 컬렉션에 넣어야 한다는 제약이 없음 -> 스키마가 없다는 뜻
- 데이터베이스는 컬렉션들의 집합
- 컬렉션은 여러개의 문서 객체를 가질 수 있음 
    //↓ 컬렉션
    {"id":1, "userid":"apple", "userpw":"1111", "gender":"여자"} //문서객체 document object
    {"id":2, "userid":"banana", "age":"25"}
    {"id":3, "name":"오렌지", "birth":"2000-01-01"}
    
✔ document -> collection -> database

document
- RDBMS 의 record와 비슷한 개념
- 데이터 구조가 한개 이상의 key-value-pair로 이루어져 있음
- 동적인 스키마를 가지고 있음 데이터가 바뀔수 있다는 뜻?
- 같은 collection 안에 있는 document끼리 다른 스키마를 가지고 있을 수 있음    

collection
- document의 그룹
- collection 내부에 document들이 위치
- table 과 비슷한 개념이지만, RDBMS와 달리 스키마를 따로 가지지 않음;


MongoDB 환경설정
- C:\Program Files\MongoDB\Server\5.0\bin

MongoDB의 문법

데이터베이스 확인
show dbs;

데이터베이스 생성
use 데이터베이스명

    use jcp;

    ✔ 데이터베이스가 없으면 생성, 있으면 선택
    ✔ 데이터베이스에 자료가 없을 경우, show dbs에서 나타나지 않음

컬렉션 생성
db.createCollection('컬렉션명');
    db.createCollection('textCollection');

컬렉션 확인
show collections;

컬렉션 삭제
db.컬렉션명.drop();

연습용 컬렉션 만들기
    db.createCollection("member");

document 추가
db.컬렉션명.insert(객체); // 객에는 js의 객체 
    db.member.insert({'userid':'apple', 'userpw':'1111', 'name':'김사과'});

document 확인
db.컬렉션명.find();

    { "_id" : ObjectId("613feba486badee9a6a8b676"), "userid" : "apple", "userpw" : "1111", "name" : "김사과" }
    MongoDB는 데이터를 넣게 되면 _id라는 요소를 넣어준다. document 동일하게 들어갈 때 구분해주기 위해서 
    ✔"_id" : ObjectId("613feba486badee9a6a8b676")는 document의 유일한 키로 쓰이는 값;

db.컬렉션명.find().pretty();
    db.member.find().pretty();




연습용 document 추가
db.member.insert({'userid':'banana', 'name':'반하나', 'gender':'여자', 'point':500});
db.member.insert({'userid':'orange', 'userpw':'2222', 'name':'오렌지', 'gender':'남자', 'point':700});
db.member.insert({'userid':'melon', 'userpw':'4444','name':'이메론', 'gender':'남자', 'point':300});
db.member.insert({'userid':'avocado', 'userpw':'3333', 'name':'안가도', 'gender':'남자', 'point':200});
db.member.insert({'userid':'coconut', 'name':'코코넛', 'gender':'남자', 'point':600});
db.member.insert({'userid':'cherry', 'userpw':'5555','name':'김체리', 'gender':'여자', 'point':500});
db.member.insert({'userid':'berry', 'name':'배애리', 'gender':'여자', 'point':400});
db.member.insert({'userid':'watermelon', 'name':'박수박', 'gender':'남자', 'point':900});
db.member.insert({'userid':'jennyboo', 'userpw':'1111','name':'표제인', 'gender':'여자', 'point':600});

document의 비교연산
$eq : 주어진 값과 일치하는 값을 찾음(==)
$gt : 주어진 값보다 큰 값을 찾음(>)
$gte : 주어진 값보다 크거나 같은 값을 찾음(>=)
$lt : 주어진 값보다 작은 값을 찾음(<)
$lte : 주어진 값보다 작거나 같은 값을 찾음(<=)
$ne : 주어진 값과 일치하지 않는 값을 찾음 (<>)
$in : 주어진 배열안에 속하는 값을 찾음 (in)
$nin : 주어진 배열안에 속하지 않는 값을 찾음 (not in)


db.member.find({"point":{$gte:700}}).pretty();

document의 논리연산 
$and : 주어진 모든 조건이 true일때 true인 결과를 찾음
$or : 주어진 조건중 하나라도 true일때 true인 결과를 찾음
$not : 주어진 조건의 false일때 true로 , true일때 false인 결과를 찾음

아이디가 "watermelon"이고 이름이 "박수박"인 member를 검색
db.member.find({$and:[{"userid":"watermelon"}, {"name":"박수박"}]}).pretty()

문제
1. 이름이 "코코넛"인 멤버를 검색
    db.member.find({"name":"코코넛"}).pretty();
2.포인트가 600보다 작거나 같은 멤버를 검색
    db.member.find({"point":{$lte:600}}).pretty();
3.아이디가 "apple"또는 "cherry"인 멤버를 검색
    db.member.find({$or:[{"userid":"apple"},{"userid":"cherry"}]}).pretty();
4.성별이 "여자"이고 포인트가 500이상인 멤버를 검색
    db.member.find({$and:[{"gender":"여자"},{"point":{$gte:500}}]}).pretty();


document의 정렬
db.컬렉션명.find().sort(객체);
    db.member.find().sort({"_id":-1}).pretty(); //내림차순 

    ✔ {"_id":-1} : key는 데이터의 field이름, value의 값은 1(오름차순) 또는 -1(내림차순)
       ----- ---
       key   value 

document의 개수 제한
limit() : 출력할 데이터 개수를 제한할 때 사용 
db.컬렉션명.find().limit(출력할 개수);
    db.member.find().limit(3).pretty(); 먼저 가입한 사람부터 세명 

document 데이터 생략 후 출력
skip() : 출력할 데이터의 시작부분을 설정할 경우 사용 
db.컬렉션명.find().skip(생략할 개수);
    db.member.find().skip(2).pretty(); //김사과, 반하나 빼고

문제.
member 컬렉션의 데이터를 아래와 같이 출력
(단, limit와 skip 사용)
1.
    표제인  
    박수박
    배애리
db.member.find().limit(3).sort({"_id":-1}).pretty();
2. //그다음 3명
    김체리
    코코넛
    안가도
db.member.find().skip(3).limit(3).sort({"_id":-1}).pretty();
3.
    이메론
    오렌지
    반하나 
db.member.find().skip(6).limit(3).sort({"_id":-1}).pretty();    
4. 
    김사과    
db.member.find().skip(9).limit(3).sort({"_id":-1}).pretty();        

document의 수정
1. 특정 field 업데이트
db.컬렉션명.update(객체, {$set:바뀔객체});
    db.member.update({"userid":"avocado"}, {$set:{name:"안카도"}});
2. document replace
db.컬렉션명.update(변경할 객체,바뀔 객체);
    db.member.udpate({"_id" : ObjectId("613ff1cd86badee9a6a8b684")}, {"userid" :"avocadu", "userpw":"5555", "name":"안카두", "gender":"남자"});
3. 특정 필드 제거
db.컬렉션명.update(변경할 객체, {$unset:{제거할 객체}});
    db.member.update({"userid":"avocado"}, {$unset:{"name":1}});
    ✔ 1은 true의 의미(삭제)

4. 여러 document의 특정 field를 수정
db.컬렉션명.update(적용할 객체, $set:{수정할 객체}, {multi: true});

point가 600보다 크거나 같은 document의 비밀번호를 모두 "0000"으로 변경
    db.member.update({point:{$gte:600}}, {$set:{"userpw":"0000"}}, {multi: true});




document의 삭제
db.컬렉션명.remove(객체)
    db.member.remove({"_id" : ObjectId("613ff1cd86badee9a6a8b684")});